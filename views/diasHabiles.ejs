<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Regomax</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    
    <!-- Custom styles -->
    <link rel="stylesheet" href="/assets/css/home.css">
    
    <!-- Estilos específicos para el calendario -->
    <style>
        .calendar {
            max-width: 600px;
            margin: 0 auto;
        }
        .calendar-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 1rem;
        }
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
        }
        .calendar-day-header {
            text-align: center;
            font-weight: bold;
            padding: 5px;
            font-size: 0.9rem;
        }
        .calendar-day {
            aspect-ratio: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.2s;
            font-size: 0.9rem;
        }
        .calendar-day:hover {
            background-color: #f8f9fa;
        }
        .day-selected {
            background-color: #0d6efd !important;
            color: white;
        }
        .day-empty {
            background-color: transparent;
            cursor: default;
        }
        .day-weekend {
            background-color: #f8d7da;
        }
        .history-card {
            max-height: 400px;
            overflow-y: auto;
        }
        .legend {
            display: flex;
            gap: 15px;
            margin-top: 10px;
            justify-content: center;
            font-size: 0.8rem;
        }
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .legend-color {
            width: 15px;
            height: 15px;
            border-radius: 3px;
        }
        .planificacion-container {
            margin-top: 2rem;
            border-top: 1px solid #dee2e6;
            padding-top: 1rem;
        }
        .plan-date-pill {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 16px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            margin-right: 8px;
            margin-bottom: 8px;
            font-size: 0.85rem;
        }
        .plan-date-pill.active {
            background-color: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }
    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand d-flex align-items-center" href="/home">
                <img src="/assets/img/regomax.png" alt="Regomax Logo" class="bg-white rounded p-1">
                <span class="ms-2 fw-bold">Regomax S.A.</span>
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto align-items-center">
                    <li class="nav-item user-welcome me-3">
                        <span class="text-light">BIENVENIDO/A, <b><%= username %></b></span>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#"><i class="bi bi-globe me-1"></i> Ver sitio</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#"><i class="bi bi-key me-1"></i> Cambiar contraseña</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="logout-link"><i class="bi bi-box-arrow-right me-1"></i> Cerrar sesión</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container my-4">
        <div class="row mb-4">
            <div class="col">
                <div class="menu-container p-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="menu-heading mb-0">
                            <i class="bi bi-calendar-check me-2"></i>Calendario de Días Hábiles
                        </h4>
                    </div>
                    
                    <p class="text-muted mb-4">
                        Selecciona los días hábiles para cada mes haciendo clic en las fechas del calendario. 
                        Los días seleccionados se marcarán como hábiles y se utilizarán para los reportes.
                    </p>
                    
                    <div class="row">
                        <!-- Calendario -->
                        <div class="col-md-8">
                            <div class="card shadow-sm mb-4">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="bi bi-calendar3 me-2"></i>Calendario: <%= nombreMes %> <%= anioActual %></h5>
                                    <div>
                                        <button class="btn btn-sm btn-success" id="guardarBtn">
                                            <i class="bi bi-save me-1"></i> Guardar Selección
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <!-- Selector de mes y año -->
                                    <div class="calendar-header mb-3">
                                        <div class="d-flex gap-2">
                                            <select id="mesSelector" class="form-select">
                                                <% for (let i = 0; i < nombresMeses.length; i++) { %>
                                                    <option value="<%= i + 1 %>" <%= i + 1 === mesActual ? 'selected' : '' %>><%= nombresMeses[i] %></option>
                                                <% } %>
                                            </select>
                                            
                                            <select id="anioSelector" class="form-select">
                                                <% for (let i = anioActual - 2; i <= anioActual + 2; i++) { %>
                                                    <option value="<%= i %>" <%= i === anioActual ? 'selected' : '' %>><%= i %></option>
                                                <% } %>
                                            </select>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-primary" id="diasSeleccionadosCount">0 días seleccionados</span>
                                        </div>
                                    </div>
                                    
                                    <!-- Calendario -->
                                    <div class="calendar">
                                        <!-- Días de la semana -->
                                        <div class="calendar-grid mb-2">
                                            <div class="calendar-day-header">Dom</div>
                                            <div class="calendar-day-header">Lun</div>
                                            <div class="calendar-day-header">Mar</div>
                                            <div class="calendar-day-header">Mié</div>
                                            <div class="calendar-day-header">Jue</div>
                                            <div class="calendar-day-header">Vie</div>
                                            <div class="calendar-day-header">Sáb</div>
                                        </div>
                                        
                                        <!-- Días del mes (se generan con JavaScript) -->
                                        <div class="calendar-grid" id="calendarDays">
                                            <!-- Los días se generan dinámicamente con JavaScript -->
                                        </div>
                                        
                                        <!-- Leyenda -->
                                        <div class="legend mt-3">
                                            <div class="legend-item">
                                                <div class="legend-color bg-primary"></div>
                                                <span>Día hábil</span>
                                            </div>
                                            <div class="legend-item">
                                                <div class="legend-color" style="background-color: #f8d7da;"></div>
                                                <span>Fin de semana</span>
                                            </div>
                                            <div class="legend-item">
                                                <div class="legend-color bg-white border"></div>
                                                <span>Día normal</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Historial de días hábiles -->
                        <div class="col-md-4">
                            <div class="card shadow-sm mb-4">
                                <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="bi bi-clock-history me-2"></i>Historial</h5>
                                </div>
                                <div class="card-body history-card">
                                    <div class="table-responsive">
                                        <table class="table table-sm table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Mes</th>
                                                    <th>Año</th>
                                                    <th>Días hábiles</th>
                                                    <th>Acciones</th>
                                                </tr>
                                            </thead>
                                            <tbody id="historialTabla">
                                                <% 
                                                const nombresMesesAbrev = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
                                                if (registros && registros.length > 0) { 
                                                    registros.forEach(registro => { 
                                                %>
                                                    <tr>
                                                        <td><%= nombresMesesAbrev[registro.mes - 1] %></td>
                                                        <td><%= registro.anio %></td>
                                                        <td><%= registro.cantidad %></td>
                                                        <td>
                                                            <div class="btn-group btn-group-sm">
                                                                <button class="btn btn-outline-primary btn-ver" 
                                                                    data-mes="<%= registro.mes %>" 
                                                                    data-anio="<%= registro.anio %>">
                                                                    <i class="bi bi-eye"></i>
                                                                </button>
                                                                <button class="btn btn-outline-danger btn-eliminar" 
                                                                    data-mes="<%= registro.mes %>" 
                                                                    data-anio="<%= registro.anio %>">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                <% })} else { %>
                                                    <tr>
                                                        <td colspan="4" class="text-center">No hay registros disponibles</td>
                                                    </tr>
                                                <% } %>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col">
                <div class="menu-container p-4">
                    <!-- Planificación de Producción -->
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="menu-heading mb-0">
                            <i class="bi bi-calendar-plus me-2"></i>Planificación de Producción
                        </h4>
                    </div>
                    
                    <p class="text-muted mb-4">
                        Define la producción esperada para cada día hábil seleccionando un día y 
                        especificando la cantidad de kilos por producto.
                    </p>
                    
                    <div class="card shadow-sm mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="card-title mb-0"><i class="bi bi-graph-up me-2"></i>Planificación: <%= nombreMes %> <%= anioActual %></h5>
                            <div>
                                <button class="btn btn-sm btn-success" id="guardarPlanBtn">
                                    <i class="bi bi-save me-1"></i> Guardar Planificación
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <!-- Selección de día -->
                            <div id="daysContainer" class="mb-4">
                                <label class="form-label">Selecciona un día para planificar:</label>
                                <div id="diasDisponibles" class="d-flex flex-wrap">
                                    <!-- Los días hábiles se cargarán dinámicamente aquí -->
                                </div>
                            </div>
                            
                            <!-- Formulario de planificación -->
                            <div id="planForm" style="display: none;">
                                <h6 class="border-bottom pb-2 mb-3">Planificación para el <span id="selectedDayText" class="fw-bold"></span></h6>
                                
                                <div class="alert alert-info small" role="alert">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Ingresa la cantidad en kilos para cada producto que planeas producir en este día.
                                </div>
                                
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover" id="productosTable">
                                        <thead>
                                            <tr>
                                                <th style="width: 60%">Producto</th>
                                                <th style="width: 40%">Kilos planificados</th>
                                            </tr>
                                        </thead>
                                        <tbody id="productosList">
                                            <!-- Los productos se cargarán dinámicamente aquí -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            
                            <!-- Mensaje cuando no hay días hábiles -->
                            <div id="noDiasMessage" class="alert alert-warning" style="display: none;">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                No hay días hábiles seleccionados para este mes. Por favor, selecciona los días hábiles en el calendario.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col">
                <a href="/home" class="btn btn-secondary">
                    <i class="bi bi-arrow-left me-2"></i>Volver al panel
                </a>
            </div>
        </div>
    </div>
    
    <!-- Modal de confirmación para eliminar -->
    <div class="modal fade" id="confirmarEliminarModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar los días hábiles seleccionados para 
                       <span id="confirmarMesAnio"></span>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-danger" id="confirmarEliminarBtn">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast para notificaciones -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-info-circle me-2"></i>
                <strong class="me-auto">Notificación</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toastMessage">
                <!-- El mensaje se establecerá dinámicamente -->
            </div>
        </div>
    </div>

    <!-- Bootstrap 5 JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Common JS (Para funcionalidades compartidas como logout) -->
    <script src="/assets/js/common.js"></script>
    
    <!-- Custom JS para esta página -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variables globales
            let mesActual = <%= mesActual %>;
            let anioActual = <%= anioActual %>;
            let diasSeleccionados = [];
            let diaSeleccionadoParaPlanificar = null;
            let productos = [];
            let planificacionActual = {};
            
            // Referencias a elementos del DOM
            const calendarDays = document.getElementById('calendarDays');
            const mesSelector = document.getElementById('mesSelector');
            const anioSelector = document.getElementById('anioSelector');
            const guardarBtn = document.getElementById('guardarBtn');
            const diasSeleccionadosCount = document.getElementById('diasSeleccionadosCount');
            const notificationToast = new bootstrap.Toast(document.getElementById('notificationToast'));
            const toastMessage = document.getElementById('toastMessage');
            const confirmarEliminarModal = new bootstrap.Modal(document.getElementById('confirmarEliminarModal'));
            const confirmarEliminarBtn = document.getElementById('confirmarEliminarBtn');
            const confirmarMesAnio = document.getElementById('confirmarMesAnio');
            
            // Referencias a elementos de planificación
            const diasDisponibles = document.getElementById('diasDisponibles');
            const planForm = document.getElementById('planForm');
            const noDiasMessage = document.getElementById('noDiasMessage');
            const selectedDayText = document.getElementById('selectedDayText');
            const productosList = document.getElementById('productosList');
            const guardarPlanBtn = document.getElementById('guardarPlanBtn');
            
            // Función para mostrar notificación
            function showNotification(message, success = true) {
                toastMessage.innerText = message;
                toastMessage.className = 'toast-body ' + (success ? 'text-success' : 'text-danger');
                notificationToast.show();
            }
            
            // Función para actualizar el contador de días seleccionados
            function actualizarContador() {
                diasSeleccionadosCount.textContent = `${diasSeleccionados.length} días seleccionados`;
                actualizarDiasParaPlanificacion();
            }
            
            // Función para cargar los productos disponibles
            async function cargarProductos() {
                try {
                    const response = await fetch('/api/productos/planificacion');
                    if (!response.ok) throw new Error('Error al cargar productos');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message || 'Error al obtener productos');
                    
                    productos = data.data;
                    return productos;
                } catch (error) {
                    console.error('Error al cargar productos:', error);
                    return [];
                }
            }
            
            // Función para actualizar la lista de días disponibles para planificación
            function actualizarDiasParaPlanificacion() {
                diasDisponibles.innerHTML = '';
                
                if (diasSeleccionados.length === 0) {
                    noDiasMessage.style.display = 'block';
                    planForm.style.display = 'none';
                    return;
                }
                
                noDiasMessage.style.display = 'none';
                
                // Ordenar días seleccionados
                const diasOrdenados = [...diasSeleccionados].sort((a, b) => a - b);
                
                // Crear elementos para cada día
                diasOrdenados.forEach(dia => {
                    const fechaCompleta = new Date(anioActual, mesActual - 1, dia);
                    const opciones = { weekday: 'short', day: 'numeric' };
                    const fechaFormateada = fechaCompleta.toLocaleDateString('es-ES', opciones);
                    
                    const dayPill = document.createElement('div');
                    dayPill.className = 'plan-date-pill';
                    dayPill.textContent = fechaFormateada;
                    dayPill.dataset.dia = dia;
                    
                    dayPill.addEventListener('click', function() {
                        // Desmarcar todos
                        document.querySelectorAll('.plan-date-pill').forEach(pill => {
                            pill.classList.remove('active');
                        });
                        
                        // Marcar este
                        this.classList.add('active');
                        
                        // Actualizar día seleccionado
                        diaSeleccionadoParaPlanificar = parseInt(this.dataset.dia);
                        
                        // Actualizar texto
                        const fechaSeleccionada = new Date(anioActual, mesActual - 1, diaSeleccionadoParaPlanificar);
                        const opcionesCompletas = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };
                        selectedDayText.textContent = fechaSeleccionada.toLocaleDateString('es-ES', opcionesCompletas);
                        
                        // Mostrar formulario y cargar datos
                        planForm.style.display = 'block';
                        cargarPlanificacionDia(diaSeleccionadoParaPlanificar);
                    });
                    
                    diasDisponibles.appendChild(dayPill);
                });
            }
            
            // Función para cargar planificación de un día específico
            async function cargarPlanificacionDia(dia) {
                try {
                    // Limpiar lista de productos
                    productosList.innerHTML = '';
                    
                    // Obtener datos de planificación si existen
                    const response = await fetch(`/api/planificacion-produccion/${anioActual}/${mesActual}/${dia}`);
                    const data = await response.json();
                    
                    let planificacionDia = {};
                    if (response.ok && data.success && data.data) {
                        planificacionDia = data.data.productos || {};
                    }
                    
                    planificacionActual = planificacionDia;
                    
                    // Cargar productos
                    if (!productos || productos.length === 0) {
                        productos = await cargarProductos();
                    }
                    
                    // Generar filas de productos
                    productos.forEach(producto => {
                        const tr = document.createElement('tr');
                        
                        const tdProducto = document.createElement('td');
                        tdProducto.textContent = producto.nombre;
                        
                        const tdCantidad = document.createElement('td');
                        const input = document.createElement('input');
                        input.type = 'number';
                        input.className = 'form-control form-control-sm';
                        input.min = '0';
                        input.placeholder = 'Kilos';
                        input.dataset.producto = producto.id;
                        
                        // Si hay planificación previa para este producto, mostrarla
                        if (planificacionDia[producto.id]) {
                            input.value = planificacionDia[producto.id];
                        }
                        
                        tdCantidad.appendChild(input);
                        
                        tr.appendChild(tdProducto);
                        tr.appendChild(tdCantidad);
                        productosList.appendChild(tr);
                    });
                    
                } catch (error) {
                    console.error('Error al cargar planificación:', error);
                    showNotification('Error al cargar la planificación: ' + error.message, false);
                }
            }
            
            // Función para guardar la planificación
            async function guardarPlanificacion() {
                try {
                    if (!diaSeleccionadoParaPlanificar) {
                        showNotification('Por favor, selecciona un día para planificar', false);
                        return;
                    }
                    
                    // Recopilar datos del formulario
                    const productosData = {};
                    const inputs = document.querySelectorAll('#productosList input[type="number"]');
                    
                    inputs.forEach(input => {
                        const productoId = input.dataset.producto;
                        const cantidad = input.value ? parseInt(input.value) : 0;
                        
                        if (cantidad > 0) {
                            productosData[productoId] = cantidad;
                        }
                    });
                    
                    // Enviar datos al servidor
                    const response = await fetch('/api/planificacion-produccion', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            anio: anioActual,
                            mes: mesActual,
                            dia: diaSeleccionadoParaPlanificar,
                            productos: productosData
                        })
                    });
                    
                    if (!response.ok) throw new Error('Error al guardar planificación');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message || 'Error al guardar planificación');
                    
                    showNotification('Planificación guardada correctamente', true);
                    
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al guardar planificación: ' + error.message, false);
                }
            }
            
            // Función para cargar el calendario para un mes y año específicos
            async function cargarCalendario(mes, anio) {
                try {
                    // Vaciar el calendario
                    calendarDays.innerHTML = '';
                    
                    // Obtener datos del calendario desde la API
                    const response = await fetch(`/api/dias-habiles?mes=${mes}&anio=${anio}`);
                    if (!response.ok) throw new Error('Error al cargar el calendario');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message || 'Error al obtener datos del calendario');
                    
                    const calendario = data.data;
                    diasSeleccionados = calendario.diasHabiles || [];
                    
                    // Actualizar contador y días para planificación
                    actualizarContador();
                    
                    // Calcular correctamente el primer día de la semana
                    // JavaScript: 0=Domingo, 1=Lunes, ..., 6=Sábado
                    const primerDiaDelMes = new Date(anio, mes - 1, 1);
                    const primerDiaSemana = primerDiaDelMes.getDay(); // Día de la semana (0-6)
                    
                    // Agregar espacios en blanco para los días antes del primer día del mes
                    // Si primerDiaSemana es 0 (domingo), no añadir espacios
                    // Si es 1 (lunes), añadir 1 espacio, etc.
                    for (let i = 0; i < primerDiaSemana; i++) {
                        const emptyDay = document.createElement('div');
                        emptyDay.className = 'calendar-day day-empty';
                        calendarDays.appendChild(emptyDay);
                    }
                    
                    // Calcular el número de días en el mes seleccionado
                    const diasEnMes = new Date(anio, mes, 0).getDate();
                    
                    // Agregar los días del mes
                    for (let i = 1; i <= diasEnMes; i++) {
                        const dayElement = document.createElement('div');
                        dayElement.className = 'calendar-day';
                        dayElement.textContent = i;
                        
                        // Verificar si es fin de semana - cálculo correcto del día de la semana
                        const fecha = new Date(anio, mes - 1, i);
                        const diaSemana = fecha.getDay(); // 0 = Domingo, 6 = Sábado
                        const esFinDeSemana = diaSemana === 0 || diaSemana === 6;
                        
                        if (esFinDeSemana) {
                            dayElement.classList.add('day-weekend');
                        }
                        
                        // Verificar si está seleccionado como día hábil
                        if (diasSeleccionados.includes(i)) {
                            dayElement.classList.add('day-selected');
                        }
                        
                        // Agregar evento de clic para seleccionar/deseleccionar
                        dayElement.addEventListener('click', function() {
                            const dia = parseInt(this.textContent);
                            const index = diasSeleccionados.indexOf(dia);
                            
                            if (index === -1) {
                                // Agregar a días seleccionados
                                diasSeleccionados.push(dia);
                                this.classList.add('day-selected');
                            } else {
                                // Quitar de días seleccionados
                                diasSeleccionados.splice(index, 1);
                                this.classList.remove('day-selected');
                            }
                            
                            // Ordenar array para mejor visualización
                            diasSeleccionados.sort((a, b) => a - b);
                            
                            // Actualizar contador y días para planificación
                            actualizarContador();
                        });
                        
                        calendarDays.appendChild(dayElement);
                    }
                    
                    // Limpiar planificación
                    diaSeleccionadoParaPlanificar = null;
                    planForm.style.display = 'none';
                    
                    // Actualizar lista de días para planificación
                    actualizarDiasParaPlanificacion();
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al cargar el calendario: ' + error.message, false);
                }
            }
            
            // Función para guardar los días hábiles seleccionados
            async function guardarDiasHabiles() {
                try {
                    const response = await fetch('/api/dias-habiles', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            mes: mesActual,
                            anio: anioActual,
                            dias: diasSeleccionados
                        })
                    });
                    
                    if (!response.ok) throw new Error('Error al guardar días hábiles');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message || 'Error al guardar días hábiles');
                    
                    showNotification('Días hábiles guardados correctamente', true);
                    
                    // Recargar la página para actualizar el historial
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al guardar días hábiles: ' + error.message, false);
                }
            }
            
            // Función para eliminar días hábiles
            async function eliminarDiasHabiles(mes, anio) {
                try {
                    const response = await fetch(`/api/dias-habiles/${mes}/${anio}`, {
                        method: 'DELETE'
                    });
                    
                    if (!response.ok) throw new Error('Error al eliminar días hábiles');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.message || 'Error al eliminar días hábiles');
                    
                    showNotification('Días hábiles eliminados correctamente', true);
                    
                    // Recargar la página para actualizar el historial
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error al eliminar días hábiles: ' + error.message, false);
                }
            }
            
            // Inicializar calendario y productos
            cargarCalendario(mesActual, anioActual);
            cargarProductos();
            
            // Evento para cambiar mes/año
            mesSelector.addEventListener('change', function() {
                mesActual = parseInt(mesSelector.value);
                cargarCalendario(mesActual, anioActual);
                
                // Actualizar URL sin recargar la página
                const newUrl = `?mes=${mesActual}&anio=${anioActual}`;
                window.history.pushState({}, '', newUrl);
            });

            anioSelector.addEventListener('change', function() {
                anioActual = parseInt(anioSelector.value);
                cargarCalendario(mesActual, anioActual);
                
                // Actualizar URL sin recargar la página
                const newUrl = `?mes=${mesActual}&anio=${anioActual}`;
                window.history.pushState({}, '', newUrl);
            });
            
            // Evento para guardar días hábiles
            guardarBtn.addEventListener('click', guardarDiasHabiles);
            
            // Evento para guardar planificación
            guardarPlanBtn.addEventListener('click', guardarPlanificacion);
            
            // Eventos para los botones de ver en el historial
            document.querySelectorAll('.btn-ver').forEach(button => {
                button.addEventListener('click', function() {
                    const mes = parseInt(this.getAttribute('data-mes'));
                    const anio = parseInt(this.getAttribute('data-anio'));
                    
                    // Actualizar selectores
                    mesSelector.value = mes;
                    anioSelector.value = anio;
                    
                    // Cargar calendario
                    mesActual = mes;
                    anioActual = anio;
                    cargarCalendario(mesActual, anioActual);
                    
                    // Actualizar URL sin recargar la página
                    const newUrl = `?mes=${mesActual}&anio=${anioActual}`;
                    window.history.pushState({}, '', newUrl);
                });
            });
            
            // Eventos para los botones de eliminar en el historial
            document.querySelectorAll('.btn-eliminar').forEach(button => {
                button.addEventListener('click', function() {
                    const mes = parseInt(this.getAttribute('data-mes'));
                    const anio = parseInt(this.getAttribute('data-anio'));
                    const nombresMeses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                                         'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
                    
                    // Mostrar modal de confirmación
                    confirmarMesAnio.textContent = `${nombresMeses[mes - 1]} ${anio}`;
                    confirmarEliminarModal.show();
                    
                    // Almacenar datos para eliminar cuando se confirme
                    confirmarEliminarBtn.dataset.mes = mes;
                    confirmarEliminarBtn.dataset.anio = anio;
                });
            });
            
            // Evento para confirmar eliminación
            confirmarEliminarBtn.addEventListener('click', function() {
                const mes = parseInt(this.dataset.mes);
                const anio = parseInt(this.dataset.anio);
                
                // Eliminar días hábiles
                eliminarDiasHabiles(mes, anio);
                
                // Cerrar modal
                confirmarEliminarModal.hide();
            });
        });
    </script>
</body>
</html>
``` 